#!/usr/bin/env node

// Generated by CoffeeScript 1.3.3
var Docker, argv, booleanish, color, d, field, fields, fs, localJSConfig, opts, path, pwd, watchr, _i, _j, _len, _len1, _localConfig, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

path = require("path");

watchr = require("watchr");

fs = require("fs");

Docker = require("docker").Docker;

try {
  require("colors");
} catch (e) {
  _ref = ["red", "green", "grey", "magenta", "bold", "underline", "blue", "cyan", "yellow"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    color = _ref[_i];
    String.prototype.__defineGetter__(color, function() {
      return this.toString();
    });
  }
}

pwd = path.resolve(".");

localJSConfig = ((function() {
  try {
    _localConfig = require(path.join(pwd, "docker.config.js"));
    console.log("Using docker.config.js config file in PWD");
    return _localConfig;
  } catch (err) {
    console.log("err!", err);
    return {};
  }
})());

console.log(localJSConfig);

argv = require("optimist").alias("i", "inDir").describe("i", "Input directory (defaults to current dir)")["default"]("i", (_ref8 = localJSConfig.inDir) != null ? _ref8 : pwd).alias("o", "outDir").describe("o", "Output directory (defaults to ./doc)")["default"]("o", (_ref7 = localJSConfig.outDir) != null ? _ref7 : path.join(pwd, "doc")).alias("t", "tplDir").describe("t", "Directory containing dox.<ext>, code.<ext>, and tmpl.<ext>")["default"]("t", (_ref6 = localJSConfig.tplDir) != null ? _ref6 : path.join(__dirname, "..", "res")).alias("e", "tplEngine").describe("e", "Template parser (see github.com/visionmedia/consolidate.js)")["default"]("e", (_ref5 = localJSConfig.tplEngine) != null ? _ref5 : "internal").alias("n", "tplExtension").describe("n", "Template file extension ")["default"]("n", (_ref4 = localJSConfig.tplExtension) != null ? _ref4 : "jst").alias("m", "markdownEngine").describe("m", "Only two choices, cowboy.")["default"]("m", (_ref3 = localJSConfig.markdownEngine) != null ? _ref3 : "marked").alias("u", "onlyUpdated").describe("u", "Only process files that have been changed")["default"]("u", localJSConfig.onlyUpdated).alias("c", "colourScheme").describe("c", "Colour scheme to use (as in pygmentize -L styles)")["default"]("c", localJSConfig.colourScheme).alias("w", "watch").describe("w", "Watch on the input directory for file changes (experimental)")["default"]("w", localJSConfig.watch).alias("I", "ignoreHidden").describe("I", "Ignore hidden files and directories (starting with . or _)")["default"]("I", localJSConfig.ignoreHidden).alias("s", "sidebarState").describe("s", "Whether the sidebar should be open or not by default")["default"]("s", (_ref2 = localJSConfig.sidebarState) != null ? _ref2 : "yes").alias("x", "exclude").describe("x", "Paths to exclude")["default"]("x", (_ref1 = localJSConfig.exclude) != null ? _ref1 : false).argv;

booleanish = function(input) {
  if (input === true || input === false) {
    return input;
  }
  if (typeof input === "number" || (+input + "" === input + "")) {
    return !!+input;
  }
  input = input.toString();
  if (input === "") {
    return true;
  } else {
    return /(y(es)?|ok|t(rue)?)/i.test(input);
  }
};

fields = ["inDir", "outDir", "tplDir", "tplEngine", "tplExtension", "markdownEngine", "onlyUpdated", "colourScheme", "ignoreHidden", "sidebarState", "exclude"];

console.log("Options:".white.bold);

opts = {};

for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
  field = fields[_j];
  opts[field] = argv[field];
  console.log(field.red + ": ".white + ((_ref9 = opts[field]) != null ? _ref9 : "-").grey);
}

d = new Docker(opts);

if (argv._.length === 0) {
  argv._ = ["./"];
}

if (argv.watch) {
  d.watch(argv._);
} else {
  d.doc(argv._);
}
