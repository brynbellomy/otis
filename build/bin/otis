#!/usr/bin/env node

// Generated by CoffeeScript 1.3.3
var Otis, args, argv, color, configFilenames, configToUse, d, field, fields, filename, fs, homeCfg, i, key, localJSConfig, newArgv, optimist, opts, path, pwd, pwdCfg, val, watchr, _i, _j, _k, _len, _len1, _len2, _localJSConfig, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;

path = require("path");

watchr = require("watchr");

fs = require("fs");

Otis = require("otis").Otis;

try {
  require("colors");
} catch (e) {
  _ref = ["red", "green", "grey", "magenta", "bold", "underline", "blue", "cyan", "yellow"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    color = _ref[_i];
    String.prototype.__defineGetter__(color, function() {
      return this.toString();
    });
  }
}

pwd = path.resolve(".");

configToUse = null;

argv = require("optimist").argv;

if ((argv != null ? argv._[0] : void 0) === "use" && ((argv != null ? argv._[1] : void 0) != null) && argv._[1].toString().trim().length > 0) {
  configToUse = argv._[1].toString().trim();
}

configFilenames = [];

if (configToUse != null) {
  homeCfg = path.join(process.env.HOME, ".otis", "otis.config." + configToUse + ".js");
  pwdCfg = path.join(pwd, "otis.config." + configToUse + ".js");
  if (!(fs.existsSync(homeCfg) || fs.existsSync(pwdCfg))) {
    console.log("Config " + configToUse + " could not be found in ./ or ~/");
    process.exit();
  } else {
    configFilenames.push(path.join(process.env.HOME, ".otis", "otis.config.js"));
    configFilenames.push(homeCfg);
    configFilenames.push(pwdCfg);
  }
} else {
  configFilenames.push(path.join(process.env.HOME, ".otis", "otis.config.js"));
  configFilenames.push(path.join(pwd, "otis.config.js"));
}

localJSConfig = {};

for (_j = 0, _len1 = configFilenames.length; _j < _len1; _j++) {
  filename = configFilenames[_j];
  try {
    _localJSConfig = require(filename);
    console.log("Using config file '" + filename + "'.");
    for (key in _localJSConfig) {
      val = _localJSConfig[key];
      if (_localJSConfig.hasOwnProperty(key)) {
        localJSConfig[key] = val;
      }
    }
  } catch (err) {
    continue;
  }
}

optimist = require("optimist").usage("\n===============================================================================\nDOCKER\nUsage: $0 [use <config>] [options] [files to document]\n\nWhen 'use <config>' is present, otis will attempt to load config files in the\nfollowing order:\n    " + "~/.otis/otis.config.js".red + "\n    " + "~/.otis/otis.config.<config>.js".red + "\n    " + "./otis.config.<config>.js".red + "\n    ... and will bail with an error if neither of the latter two could be found.\n\nWhen there is no 'use <config>' argument specified, otis will use this order\ninstead:\n    " + "~/.otis/otis.config.js".red + "\n    " + "./otis.config.js".red + "\n\n" + "~/.otis/".red + " is also a great place to store your custom templates, etc. as well.").alias("U", "use").alias("i", "inDir").describe("i", "Input directory (defaults to current dir)")["default"]("i", (_ref10 = localJSConfig.inDir) != null ? _ref10 : pwd).alias("o", "outDir").describe("o", "Output directory (defaults to ./doc)")["default"]("o", (_ref9 = localJSConfig.outDir) != null ? _ref9 : path.join(pwd, "doc")).alias("t", "tplDir").describe("t", "Directory containing dox.<ext>, code.<ext>, and tmpl.<ext>")["default"]("t", (_ref8 = localJSConfig.tplDir) != null ? _ref8 : path.join(__dirname, "..", "res")).alias("e", "tplEngine").describe("e", "Template parser (see github.com/visionmedia/consolidate.js)")["default"]("e", (_ref7 = localJSConfig.tplEngine) != null ? _ref7 : "internal").alias("n", "tplExtension").describe("n", "Template file extension ")["default"]("n", (_ref6 = localJSConfig.tplExtension) != null ? _ref6 : "jst").alias("m", "markdownEngine").describe("m", "Only two choices, cowboy.")["default"]("m", (_ref5 = localJSConfig.markdownEngine) != null ? _ref5 : "marked").alias("u", "onlyUpdated").describe("u", "Only process files that have been changed")["default"]("u", localJSConfig.onlyUpdated).alias("c", "colourScheme").describe("c", "Color scheme to use (as in pygmentize -L styles)")["default"]("c", localJSConfig.colourScheme).alias("y", "css").describe("y", "CSS file to include after pygments CSS (you can specify this flag multiple times)")["default"]("y", (_ref4 = localJSConfig.css) != null ? _ref4 : []).alias("T", "tolerant").describe("T", "Will parse comments without a leading ! (ex: \"/**! ...\")")["default"]("T", (_ref3 = localJSConfig.tolerant) != null ? _ref3 : false).boolean("T").alias("w", "watch").describe("w", "Watch on the input directory for file changes (experimental)")["default"]("w", localJSConfig.watch).boolean("w").alias("I", "ignoreHidden").describe("I", "Ignore hidden files and directories (starting with . or _)")["default"]("I", localJSConfig.ignoreHidden).boolean("I").alias("s", "sidebarState").describe("s", "Whether the sidebar should be open or not by default")["default"]("s", (_ref2 = localJSConfig.sidebarState) != null ? _ref2 : "yes").boolean("s").alias("x", "exclude").describe("x", "Paths to exclude")["default"]("x", (_ref1 = localJSConfig.exclude) != null ? _ref1 : false).alias("W", "writeConfig").describe("W", "Write 'otis.config.js' in PWD using the options provided.")["default"]("W", false).boolean("W").alias("h", "help").describe("h", "Show this help text.")["default"]("h", false).boolean("h");

argv = optimist.argv;

if (argv.help || argv._.length <= 0) {
  optimist.showHelp();
  process.exit();
}

if (!(argv.css instanceof Array)) {
  argv.css = [argv.css];
  argv.y = [argv.y];
}

fields = ["inDir", "outDir", "tplDir", "tplEngine", "tplExtension", "markdownEngine", "onlyUpdated", "colourScheme", "css", "tolerant", "ignoreHidden", "sidebarState", "exclude"];

console.log("Options:".white.bold);

opts = {};

for (_k = 0, _len2 = fields.length; _k < _len2; _k++) {
  field = fields[_k];
  if (!(typeof argv[field] !== void 0)) {
    continue;
  }
  opts[field] = argv[field];
  console.log(field.red + ": ".white + ((_ref11 = opts[field]) != null ? _ref11 : "-").toString().grey);
}

if ((argv != null ? argv.writeConfig : void 0) === true) {
  require("fs").writeFileSync(path.join(pwd, "otis.config.js"), "module.exports = " + (require('util').inspect(opts)) + ";", "utf8");
}

d = new Otis(opts);

args = argv._;

if (args.length > 0) {
  newArgv = [];
  i = 0;
  while (i < args.length) {
    if (args[i] === "use") {
      i += 2;
    } else {
      newArgv.push(args[i]);
      i++;
    }
  }
  args = newArgv;
}

if (argv.watch) {
  d.watch(args);
} else {
  d.doc(args);
}
